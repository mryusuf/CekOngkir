//
//  ProvinceWorker.swift
//  CekOngkir
//
//  Created by Indra Permana on 28/01/20.
//  Copyright (c) 2020 Yusuf Indra. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ProvinceWorker {
    var provinceStore: ProvincesStoreProtocol
    
    init(provinceStore: ProvincesStoreProtocol) {
        self.provinceStore = provinceStore
    }
    
    func doSomeWork() {
    }
    
    func fetchProvinces(completionHandler: @escaping ([Province]) -> Void) {
      provinceStore.fetchProvinces { (provinces: () throws -> [Province]) -> Void in
        do {
          let provinces = try provinces()
          DispatchQueue.main.async {
            completionHandler(provinces)
          }
        } catch {
          DispatchQueue.main.async {
            completionHandler([])
          }
        }
      }
    }
    
    func createProvinces(provinceToCreate: Province, completionHandler: @escaping (Province?) -> Void) {
        
        provinceStore.createProvince(provinceToCreate: provinceToCreate) { (province: () throws -> Province?) -> Void in
            do {
                let province = try province()
                DispatchQueue.main.async {
                    completionHandler(province)
                }
            } catch {
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
        }
    }
    }
}

// MARK: - Provinces store API

protocol ProvincesStoreProtocol {
  
  func fetchProvinces(completionHandler: @escaping (() throws -> [Province]) -> Void)
  func fetchProvince(id: String, completionHandler: @escaping (() throws -> Province?) -> Void)
  func createProvince(provinceToCreate: Province, completionHandler: @escaping (() throws -> Province?) -> Void)
  func updateProvince(ProvinceToUpdate: Province, completionHandler: @escaping (() throws -> Province?) -> Void)
  func deleteProvince(id: String, completionHandler: @escaping (() throws -> Province?) -> Void)
}

// MARK: - Provinces store CRUD operation results

typealias ProvincesStoreFetchProvincesCompletionHandler = (ProvincesStoreResult<[Province]>) -> Void
typealias ProvincesStoreFetchProvinceCompletionHandler = (ProvincesStoreResult<Province>) -> Void
typealias ProvincesStoreCreateProvinceCompletionHandler = (ProvincesStoreResult<Province>) -> Void
typealias ProvincesStoreUpdateProvinceCompletionHandler = (ProvincesStoreResult<Province>) -> Void
typealias ProvincesStoreDeleteProvinceCompletionHandler = (ProvincesStoreResult<Province>) -> Void

enum ProvincesStoreResult<U>
{
  case Success(result: U)
  case Failure(error: ProvincesStoreError)
}


// MARK: - Province store CRUD operation errors

enum ProvincesStoreError: Equatable, Error
{
  case CannotFetch(String)
  case CannotCreate(String)
  case CannotUpdate(String)
  case CannotDelete(String)
}
