//
//  HomeInteractor.swift
//  CekOngkir
//
//  Created by Indra Permana on 28/01/20.
//  Copyright (c) 2020 Yusuf Indra. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
  func fetchProvincesRajaOngkirAPI(request: Home.FetchRajaOngkir.Request)
    func fetchCitiesRajaOngkirAPI(request: Home.FetchRajaOngkir.Request)
    func fetchProvincesLocal(request: Home.FetchRajaOngkir.Request)
}

protocol HomeDataStore
{
  //var name: String { get set }
    var provinces: [Province]? {get}
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore
{
  var presenter: HomePresentationLogic?
  var worker: HomeWorker?
    var provinceWorkerAPI = ProvinceWorker(provinceStore: RajaOngkirAPI())
    // MARK: create provinceWorkerCoreData
    var provinceWorkerCoreData = ProvinceWorker(provinceStore: RajaOngkirCoreData())
    var citiesWorkerAPI = CitiesWorker(citiesStore: RajaOngkirAPI())
    var citiesWorkerCoreData = CitiesWorker(citiesStore: RajaOngkirCoreData())
    
    var provinces: [Province]?
    var cities: [City]?

  func fetchProvincesRajaOngkirAPI(request: Home.FetchRajaOngkir.Request)
  {
//    worker = HomeWorker()
//    worker?.doSomeWork()
    print("Start fetching Provinces from RajaOngkir API")
    provinceWorkerAPI.fetchProvinces { (provinces) -> Void in
        self.provinces = provinces
        for province in provinces {
            self.provinceWorkerCoreData.createProvinces(provinceToCreate: province) {(province: Province?) -> Void in
                
            }
        }
    }
    // MARK: store fetched provinces to CoreData using provinceWorkerCoreData
//    guard provinces!.count > 0 else{return}
    
//    let response = Home.Something.Response(provinces: provinces)
//    presenter?.presentSomething(response: response)
  }
    func fetchCitiesRajaOngkirAPI(request: Home.FetchRajaOngkir.Request) {
        print("Start fetching Cities from RajaOngkir API")
        citiesWorkerAPI.fetchCities { (cities) -> Void in
            self.cities = cities
            for city in cities {
                self.citiesWorkerCoreData.createCities(citiesToCreate: city) { (city: City?) -> Void in
                    
                }
            }
        }
    }
    func fetchProvincesLocal(request: Home.FetchRajaOngkir.Request) {
        provinceWorkerCoreData.fetchProvinces { (provinces) -> Void in
            self.provinces = provinces
            // presenter do something pls
        }
        
    }
}
