//
//  HomeInteractor.swift
//  CekOngkir
//
//  Created by Indra Permana on 28/01/20.
//  Copyright (c) 2020 Yusuf Indra. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
  func fetchProvincesRajaOngkirAPI(request: Home.FetchRajaOngkir.Request)
    func fetchCitiesRajaOngkirAPI(request: Home.FetchRajaOngkir.Request)
    func fetchCitiesLocal(request: Home.FetchRajaOngkir.Request)
    var couriers: [String] {get}
    func fetchCostRajaOngkirAPI(request: Home.QueryOngkir.Request)
}

protocol HomeDataStore
{

    var provinces: [Province]? {get}
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore
{
  var presenter: HomePresentationLogic?
  
    let couriers = ["JNE", "POS Indonesia", "TIKI"]
    var provinceWorkerAPI = ProvinceWorker(provinceStore: RajaOngkirAPI())
    // MARK: create provinceWorkerCoreData
    var provinceWorkerCoreData = ProvinceWorker(provinceStore: RajaOngkirCoreData())
    var citiesWorkerAPI = CitiesWorker(citiesStore: RajaOngkirAPI())
    var citiesWorkerCoreData = CitiesWorker(citiesStore: RajaOngkirCoreData())
    var costWorker = HomeWorker(costsFetch: RajaOngkirAPI())
    var provinces: [Province]?
    var cities: [City]?
    var costs: [Costs]?
  func fetchProvincesRajaOngkirAPI(request: Home.FetchRajaOngkir.Request)
  {

    print("Start fetching Provinces from RajaOngkir API")
    provinceWorkerAPI.fetchProvinces { (provinces) -> Void in
        self.provinces = provinces
        for province in provinces {
            self.provinceWorkerCoreData.createProvinces(provinceToCreate: province) {(province: Province?) -> Void in
                
            }
        }
    }

  }
    func fetchCitiesRajaOngkirAPI(request: Home.FetchRajaOngkir.Request) {
        print("Start fetching Cities from RajaOngkir API")
        citiesWorkerAPI.fetchCities { (cities) -> Void in
            self.cities = cities
            for city in cities {
                self.citiesWorkerCoreData.createCities(citiesToCreate: city) { (city: City?) -> Void in
                    
                }
            }
        }
    }
    func fetchCitiesLocal(request: Home.FetchRajaOngkir.Request) {
        citiesWorkerCoreData.fetchCities { (cities) -> Void in
            self.cities = cities
            // presenter do something pls
            let response = Home.FetchRajaOngkir.Response(cities: cities)
            self.presenter?.presentFetchedCities(response: response)
        }
    }
    
    func fetchCostRajaOngkirAPI(request: Home.QueryOngkir.Request) {
        let query = request.queryOngkirFormFields
        costWorker.fetchCosts(query: query) { (costs) -> Void in
            self.costs = costs
//            print("The Costs available are \(costs?.description)")
            let response = Home.QueryOngkir.Response(costs: costs!)
            self.presenter?.presentFetchedCosts(response: response)
        }
    }
}
